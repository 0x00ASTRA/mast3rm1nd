{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Netscript/RamCostGenerator.ts","webpack:///./utils/helpers/getRandomInt.ts","webpack:///./utils/JSONReviver.js","webpack:///./test/StockMarketTests.js","webpack:///./test/Netscript/StaticRamCalculationTests.js","webpack:///./src/StockMarket/data/PositionTypes.ts","webpack:///./src/StockMarket/StockMarketHelpers.ts","webpack:///./test/index.js","webpack:///./src/StockMarket/data/OrderTypes.ts","webpack:///./src/StockMarket/Stock.ts","webpack:///./src/Constants.ts","webpack:///./src/StockMarket/Order.ts"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA,gIAAoD;AACpD;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA,iIAAqD;AACrD;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iIAAqD;AACrD;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kIAAsD;AACtD;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA,0FAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,oGAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;;AAEA,KAAK;AACL,CAAC;;;;;;;;;;;;;AChqBD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACqB;AACrB,UAAU,oBAAoB;;AAE9B;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;AClBD,IAAY,aAGX;AAHD,WAAY,aAAa;IACrB,2BAAU;IACV,4BAAW;AACf,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;;;;;;;;;;;;;;;;ACHD,uDAAgC;AAChC,4EAAqD;AACrD,+DAAyC;AAEzC,wEAAwE;AAC3D,sCAA8B,GAAG,GAAG,CAAC;AAElD;;;;;;GAMG;AACH,0CAAiD,KAAY;IACzD,IAAI,CAAC,CAAC,KAAK,YAA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","file":"test/tests.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 300);\n","import { IMap } from \"../types\";\r\n\r\n// TODO remember to update RamCalculations.js and WorkerScript.js\r\n\r\n// RAM costs for Netscript functions\r\nexport const RamCostConstants: IMap<number> = {\r\n    ScriptBaseRamCost: 1.6,\r\n    ScriptDomRamCost: 25,\r\n    ScriptHackRamCost: 0.1,\r\n    ScriptHackAnalyzeRamCost: 1,\r\n    ScriptGrowRamCost: 0.15,\r\n    ScriptGrowthAnalyzeRamCost: 1,\r\n    ScriptWeakenRamCost: 0.15,\r\n    ScriptScanRamCost: 0.2,\r\n    ScriptPortProgramRamCost: 0.05,\r\n    ScriptRunRamCost: 1.0,\r\n    ScriptExecRamCost: 1.3,\r\n    ScriptSpawnRamCost: 2.0,\r\n    ScriptScpRamCost: 0.6,\r\n    ScriptKillRamCost: 0.5,\r\n    ScriptHasRootAccessRamCost: 0.05,\r\n    ScriptGetHostnameRamCost: 0.05,\r\n    ScriptGetHackingLevelRamCost: 0.05,\r\n    ScriptGetMultipliersRamCost: 4.0,\r\n    ScriptGetServerRamCost: 0.1,\r\n    ScriptFileExistsRamCost: 0.1,\r\n    ScriptIsRunningRamCost: 0.1,\r\n    ScriptHacknetNodesRamCost: 4.0,\r\n    ScriptHNUpgLevelRamCost: 0.4,\r\n    ScriptHNUpgRamRamCost: 0.6,\r\n    ScriptHNUpgCoreRamCost: 0.8,\r\n    ScriptGetStockRamCost: 2.0,\r\n    ScriptBuySellStockRamCost: 2.5,\r\n    ScriptGetPurchaseServerRamCost: 0.25,\r\n    ScriptPurchaseServerRamCost: 2.25,\r\n    ScriptGetPurchasedServerLimit: 0.05,\r\n    ScriptGetPurchasedServerMaxRam: 0.05,\r\n    ScriptRoundRamCost: 0.05,\r\n    ScriptReadWriteRamCost: 1.0,\r\n    ScriptArbScriptRamCost: 1.0,\r\n    ScriptGetScriptRamCost: 0.1,\r\n    ScriptGetHackTimeRamCost: 0.05,\r\n    ScriptGetFavorToDonate: 0.10,\r\n    ScriptCodingContractBaseRamCost: 10,\r\n    ScriptSleeveBaseRamCost: 4,\r\n\r\n    ScriptSingularityFn1RamCost: 2,\r\n    ScriptSingularityFn2RamCost: 3,\r\n    ScriptSingularityFn3RamCost: 5,\r\n\r\n    ScriptGangApiBaseRamCost: 4,\r\n\r\n    ScriptBladeburnerApiBaseRamCost: 4,\r\n}\r\n\r\nexport const RamCosts: IMap<any> = {\r\n    hacknet: {\r\n        numNodes: () => 0,\r\n        purchaseNode: () => 0,\r\n        getPurchaseNodeCost: () => 0,\r\n        getNodeStats: () => 0,\r\n        upgradeLevel: () => 0,\r\n        upgradeRam: () => 0,\r\n        upgradeCore: () => 0,\r\n        upgradeCache: () => 0,\r\n        getLevelUpgradeCost: () => 0,\r\n        getRamUpgradeCost: () => 0,\r\n        getCoreUpgradeCost: () => 0,\r\n        getCacheUpgradeCost: () => 0,\r\n        numHashes: () => 0,\r\n        hashCost: () => 0,\r\n        spendHashes: () => 0,\r\n    },\r\n    sprintf: () => 0,\r\n    vsprintf: () => 0,\r\n    scan: () => RamCostConstants.ScriptScanRamCost,\r\n    hack: () => RamCostConstants.ScriptHackRamCost,\r\n    hackAnalyzeThreads: () => RamCostConstants.ScriptHackAnalyzeRamCost,\r\n    hackAnalyzePercent: () => RamCostConstants.ScriptHackAnalyzeRamCost,\r\n    hackChance: () => RamCostConstants.ScriptHackAnalyzeRamCost,\r\n    sleep: () => 0,\r\n    grow: () => RamCostConstants.ScriptGrowRamCost,\r\n    growthAnalyze: () => RamCostConstants.ScriptGrowthAnalyzeRamCost,\r\n    weaken: () => RamCostConstants.ScriptWeakenRamCost,\r\n    print: () => 0,\r\n    tprint: () => 0,\r\n    clearLog: () => 0,\r\n    disableLog: () => 0,\r\n    enableLog: () => 0,\r\n    isLogEnabled: () => 0,\r\n    getScriptLogs: () => 0,\r\n    nuke: () => RamCostConstants.ScriptPortProgramRamCost,\r\n    brutessh: () => RamCostConstants.ScriptPortProgramRamCost,\r\n    ftpcrack: () => RamCostConstants.ScriptPortProgramRamCost,\r\n    relaysmtp: () => RamCostConstants.ScriptPortProgramRamCost,\r\n    httpworm: () => RamCostConstants.ScriptPortProgramRamCost,\r\n    sqlinject: () => RamCostConstants.ScriptPortProgramRamCost,\r\n    run: () => RamCostConstants.ScriptRunRamCost,\r\n    exec: () => RamCostConstants.ScriptExecRamCost,\r\n    spawn: () => RamCostConstants.ScriptSpawnRamCost,\r\n    kill: () => RamCostConstants.ScriptKillRamCost,\r\n    killall: () => RamCostConstants.ScriptKillRamCost,\r\n    exit: () => 0,\r\n    scp: () => RamCostConstants.ScriptScpRamCost,\r\n    ls: () => RamCostConstants.ScriptScanRamCost,\r\n    ps: () => RamCostConstants.ScriptScanRamCost,\r\n    hasRootAccess: () => RamCostConstants.ScriptHasRootAccessRamCost,\r\n    getIp: () => RamCostConstants.ScriptGetHostnameRamCost,\r\n    getHostname: () => RamCostConstants.ScriptGetHostnameRamCost,\r\n    getHackingLevel: () => RamCostConstants.ScriptGetHackingLevelRamCost,\r\n    getHackingMultipliers: () => RamCostConstants.ScriptGetMultipliersRamCost,\r\n    getHacknetMultipliers: () => RamCostConstants.ScriptGetMultipliersRamCost,\r\n    getBitNodeMultipliers: () => RamCostConstants.ScriptGetMultipliersRamCost,\r\n    getServerMoneyAvailable: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerSecurityLevel: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerBaseSecurityLevel: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerMinSecurityLevel: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerRequiredHackingLevel: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerMaxMoney: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerGrowth: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerNumPortsRequired: () => RamCostConstants.ScriptGetServerRamCost,\r\n    getServerRam: () => RamCostConstants.ScriptGetServerRamCost,\r\n    serverExists: () => RamCostConstants.ScriptGetServerRamCost,\r\n    fileExists: () => RamCostConstants.ScriptFileExistsRamCost,\r\n    isRunning: () => RamCostConstants.ScriptIsRunningRamCost,\r\n    getStockSymbols: () => RamCostConstants.ScriptGetStockRamCost,\r\n    getStockPrice: () => RamCostConstants.ScriptGetStockRamCost,\r\n    getStockAskPrice: () => RamCostConstants.ScriptGetStockRamCost,\r\n    getStockBidPrice: () => RamCostConstants.ScriptGetStockRamCost,\r\n    getStockPosition: () => RamCostConstants.ScriptGetStockRamCost,\r\n    getStockMaxShares: () => RamCostConstants.ScriptGetStockRamCost,\r\n    getStockPurchaseCost: () => RamCostConstants.ScriptGetStockRamCost,\r\n    getStockSaleGain: () => RamCostConstants.ScriptGetStockRamCost,\r\n    buyStock: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    sellStock: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    shortStock: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    sellShort: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    placeOrder: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    cancelOrder: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    getOrders: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    getStockVolatility: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    getStockForecast: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    purchase4SMarketData: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    purchase4SMarketDataTixApi: () => RamCostConstants.ScriptBuySellStockRamCost,\r\n    getPurchasedServerLimit: () => RamCostConstants.ScriptGetPurchasedServerLimit,\r\n    getPurchasedServerMaxRam: () => RamCostConstants.ScriptGetPurchasedServerMaxRam,\r\n    getPurchasedServerCost: () => RamCostConstants.ScriptGetPurchaseServerRamCost,\r\n    purchaseServer: () => RamCostConstants.ScriptPurchaseServerRamCost,\r\n    deleteServer: () => RamCostConstants.ScriptPurchaseServerRamCost,\r\n    getPurchasedServers: () => RamCostConstants.ScriptPurchaseServerRamCost,\r\n    write: () => RamCostConstants.ScriptReadWriteRamCost,\r\n    tryWrite: () => RamCostConstants.ScriptReadWriteRamCost,\r\n    read: () => RamCostConstants.ScriptReadWriteRamCost,\r\n    peek: () => RamCostConstants.ScriptReadWriteRamCost,\r\n    clear: () => RamCostConstants.ScriptReadWriteRamCost,\r\n    getPortHandle: () => RamCostConstants.ScriptReadWriteRamCost * 10,\r\n    rm: () => RamCostConstants.ScriptReadWriteRamCost,\r\n    scriptRunning: () => RamCostConstants.ScriptArbScriptRamCost,\r\n    scriptKill: () => RamCostConstants.ScriptArbScriptRamCost,\r\n    getScriptName: () => 0,\r\n    getScriptRam: () => RamCostConstants.ScriptGetScriptRamCost,\r\n    getHackTime: () => RamCostConstants.ScriptGetHackTimeRamCost,\r\n    getGrowTime: () => RamCostConstants.ScriptGetHackTimeRamCost,\r\n    getWeakenTime: () => RamCostConstants.ScriptGetHackTimeRamCost,\r\n    getScriptIncome: () => RamCostConstants.ScriptGetScriptRamCost,\r\n    getScriptExpGain: () => RamCostConstants.ScriptGetScriptRamCost,\r\n    nFormat: () => 0,\r\n    getTimeSinceLastAug: () => RamCostConstants.ScriptGetHackTimeRamCost,\r\n    prompt: () => 0,\r\n    wget: () => 0,\r\n    getFavorToDonate: () => RamCostConstants.ScriptGetFavorToDonate,\r\n\r\n    // Singularity Functions\r\n    universityCourse: () => RamCostConstants.ScriptSingularityFn1RamCost,\r\n    gymWorkout: () => RamCostConstants.ScriptSingularityFn1RamCost,\r\n    travelToCity: () => RamCostConstants.ScriptSingularityFn1RamCost,\r\n    purchaseTor: () => RamCostConstants.ScriptSingularityFn1RamCost,\r\n    purchaseProgram: () => RamCostConstants.ScriptSingularityFn1RamCost,\r\n    getStats: () => RamCostConstants.ScriptSingularityFn1RamCost / 4,\r\n    getCharacterInformation: () => RamCostConstants.ScriptSingularityFn1RamCost / 4,\r\n    isBusy: () => RamCostConstants.ScriptSingularityFn1RamCost / 4,\r\n    stopAction: () => RamCostConstants.ScriptSingularityFn1RamCost / 2,\r\n    upgradeHomeRam: () => RamCostConstants.ScriptSingularityFn2RamCost,\r\n    getUpgradeHomeRamCost: () => RamCostConstants.ScriptSingularityFn2RamCost / 2,\r\n    workForCompany: () => RamCostConstants.ScriptSingularityFn2RamCost,\r\n    applyToCompany: () => RamCostConstants.ScriptSingularityFn2RamCost,\r\n    getCompanyRep: () => RamCostConstants.ScriptSingularityFn2RamCost / 3,\r\n    getCompanyFavor: () => RamCostConstants.ScriptSingularityFn2RamCost / 3,\r\n    getCompanyFavorGain: () => RamCostConstants.ScriptSingularityFn2RamCost / 4,\r\n    checkFactionInvitations: () => RamCostConstants.ScriptSingularityFn2RamCost,\r\n    joinFaction: () => RamCostConstants.ScriptSingularityFn2RamCost,\r\n    workForFaction: () => RamCostConstants.ScriptSingularityFn2RamCost,\r\n    getFactionRep: () => RamCostConstants.ScriptSingularityFn2RamCost / 3,\r\n    getFactionFavor: () => RamCostConstants.ScriptSingularityFn2RamCost / 3,\r\n    getFactionFavorGain: () => RamCostConstants.ScriptSingularityFn2RamCost / 4,\r\n    donateToFaction: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    createProgram: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    commitCrime: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    getCrimeChance: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    getOwnedAugmentations: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    getOwnedSourceFiles: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    getAugmentationsFromFaction: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    getAugmentationPrereq: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    getAugmentationCost: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    purchaseAugmentation: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n    installAugmentations: () => RamCostConstants.ScriptSingularityFn3RamCost,\r\n\r\n    // Gang API\r\n    gang : {\r\n        getMemberNames: () => RamCostConstants.ScriptGangApiBaseRamCost / 4,\r\n        getGangInformation: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        getOtherGangInformation: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        getMemberInformation: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        canRecruitMember: () => RamCostConstants.ScriptGangApiBaseRamCost / 4,\r\n        recruitMember: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        getTaskNames: () => RamCostConstants.ScriptGangApiBaseRamCost / 4,\r\n        setMemberTask: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        getEquipmentNames: () => RamCostConstants.ScriptGangApiBaseRamCost / 4,\r\n        getEquipmentCost: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        getEquipmentType: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        purchaseEquipment: () => RamCostConstants.ScriptGangApiBaseRamCost,\r\n        ascendMember: () => RamCostConstants.ScriptGangApiBaseRamCost,\r\n        setTerritoryWarfare: () => RamCostConstants.ScriptGangApiBaseRamCost / 2,\r\n        getChanceToWinClash: () => RamCostConstants.ScriptGangApiBaseRamCost,\r\n        getBonusTime: () => 0,\r\n    },\r\n\r\n    // Bladeburner API\r\n    bladeburner : {\r\n        getContractNames: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 10,\r\n        getOperationNames: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 10,\r\n        getBlackOpNames: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 10,\r\n        getBlackOpRank: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 2,\r\n        getGeneralActionNames: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 10,\r\n        getSkillNames: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 10,\r\n        startAction: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        stopBladeburnerAction: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 2,\r\n        getCurrentAction: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost / 4,\r\n        getActionTime: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getActionEstimatedSuccessChance: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getActionRepGain: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getActionCountRemaining: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getActionMaxLevel: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getActionCurrentLevel: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getActionAutolevel: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        setActionAutolevel: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        setActionLevel: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getRank: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getSkillPoints: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getSkillLevel: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getSkillUpgradeCost: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        upgradeSkill: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getTeamSize: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        setTeamSize: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getCityEstimatedPopulation: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getCityEstimatedCommunities: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getCityChaos: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getCity: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        switchCity: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getStamina: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        joinBladeburnerFaction: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        joinBladeburnerDivision: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n        getBonusTime: () => RamCostConstants.ScriptBladeburnerApiBaseRamCost,\r\n    },\r\n\r\n    // Coding Contract API\r\n    codingcontract : {\r\n        attempt: () => RamCostConstants.ScriptCodingContractBaseRamCost,\r\n        getContractType: () => RamCostConstants.ScriptCodingContractBaseRamCost / 2,\r\n        getData: () => RamCostConstants.ScriptCodingContractBaseRamCost / 2,\r\n        getDescription: () => RamCostConstants.ScriptCodingContractBaseRamCost / 2,\r\n        getNumTriesRemaining: () => RamCostConstants.ScriptCodingContractBaseRamCost / 2,\r\n    },\r\n\r\n    // Duplicate Sleeve API\r\n    sleeve : {\r\n        getNumSleeves: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        setToShockRecovery: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        setToSynchronize: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        setToCommitCrime: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        setToUniversityCourse: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        travel: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        setToCompanyWork: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        setToFactionWork: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        setToGymWorkout: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        getSleeveStats: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        getTask: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        getInformation: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        getSleeveAugmentations: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        getSleevePurchasableAugs: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n        purchaseSleeveAug: () => RamCostConstants.ScriptSleeveBaseRamCost,\r\n    },\r\n\r\n    heart: {\r\n        // Easter egg function\r\n        break : () => 0,\r\n    }\r\n}\r\n\r\nexport function getRamCost(...args: string[]): number {\r\n    if (args.length === 0) {\r\n        console.warn(`No arguments passed to getRamCost()`);\r\n        return 0;\r\n    }\r\n\r\n    let curr = RamCosts[args[0]];\r\n    for (let i = 1; i < args.length; ++i) {\r\n        if (curr == null) {\r\n            console.warn(`Invalid function passed to getRamCost: ${args}`);\r\n            return 0;\r\n        }\r\n\r\n        const currType = typeof curr;\r\n        if (currType === \"function\" || currType === \"number\") {\r\n            break;\r\n        }\r\n\r\n        curr = curr[args[i]];\r\n    }\r\n\r\n    const currType = typeof curr;\r\n    if (currType === \"function\") {\r\n        return curr();\r\n    }\r\n\r\n    if (currType === \"number\") {\r\n        return curr;\r\n    }\r\n\r\n    console.warn(`Expected type: ${currType}`);\r\n    return 0;\r\n}\r\n","/**\r\n * Gets a random integer bounded by the values passed in.\r\n * @param min The minimum value in the range.\r\n * @param max The maximum value in the range.\r\n */\r\nexport function getRandomInt(min: number, max: number) {\r\n    const lower: number = Math.min(min, max);\r\n    const upper: number = Math.max(min, max);\r\n\r\n    return Math.floor(Math.random() * (upper - lower + 1)) + lower;\r\n}\r\n","/* Generic Reviver, toJSON, and fromJSON functions used for saving and loading objects */\r\n\r\n// A generic \"smart reviver\" function.\r\n// Looks for object values with a `ctor` property and\r\n// a `data` property. If it finds them, and finds a matching\r\n// constructor that has a `fromJSON` property on it, it hands\r\n// off to that `fromJSON` fuunction, passing in the value.\r\nfunction Reviver(key, value) {\r\n\tvar ctor;\r\n    if (value == null) {\r\n        console.log(\"Reviver WRONGLY called with key: \" + key + \", and value: \" + value);\r\n        return 0;\r\n    }\r\n\r\n\tif (typeof value === \"object\" &&\r\n\t\ttypeof value.ctor === \"string\" &&\r\n\t\ttypeof value.data !== \"undefined\") {\r\n\t\t\t// Compatibility for version v0.43.1\r\n\t\t\t// TODO Remove this eventually\r\n\t\t\tif (value.ctor === \"AllServersMap\") {\r\n\t\t\t\tconsole.log('Converting AllServersMap for v0.43.1');\r\n\t\t\t\treturn value.data;\r\n\t\t\t}\r\n\r\n\t\t\tctor = Reviver.constructors[value.ctor] || window[value.ctor];\r\n\r\n\t\t\tif (typeof ctor === \"function\" &&\r\n\t\t\t\ttypeof ctor.fromJSON === \"function\") {\r\n\r\n\t\t\t\t\treturn ctor.fromJSON(value);\r\n\t\t\t}\r\n\t}\r\n\treturn value;\r\n}\r\nReviver.constructors = {}; // A list of constructors the smart reviver should know about\r\n\r\n// A generic \"toJSON\" function that creates the data expected\r\n// by Reviver.\r\n// `ctorName`  The name of the constructor to use to revive it\r\n// `obj`       The object being serialized\r\n// `keys`      (Optional) Array of the properties to serialize,\r\n//             if not given then all of the objects \"own\" properties\r\n//             that don't have function values will be serialized.\r\n//             (Note: If you list a property in `keys`, it will be serialized\r\n//             regardless of whether it's an \"own\" property.)\r\n// Returns:    The structure (which will then be turned into a string\r\n//             as part of the JSON.stringify algorithm)\r\nfunction Generic_toJSON(ctorName, obj, keys) {\r\n  var data, index, key;\r\n\r\n  if (!keys) {\r\n    keys = Object.keys(obj); // Only \"own\" properties are included\r\n  }\r\n\r\n  data = {};\r\n  for (let index = 0; index < keys.length; ++index) {\r\n    key = keys[index];\r\n    data[key] = obj[key];\r\n  }\r\n  return {ctor: ctorName, data: data};\r\n}\r\n\r\n// A generic \"fromJSON\" function for use with Reviver: Just calls the\r\n// constructor function with no arguments, then applies all of the\r\n// key/value pairs from the raw data to the instance. Only useful for\r\n// constructors that can be reasonably called without arguments!\r\n// `ctor`      The constructor to call\r\n// `data`      The data to apply\r\n// Returns:    The object\r\nfunction Generic_fromJSON(ctor, data) {\r\n  var obj, name;\r\n\r\n  obj = new ctor();\r\n  for (name in data) {\r\n    obj[name] = data[name];\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport {Reviver, Generic_toJSON, Generic_fromJSON};\r\n","import { CONSTANTS } from \"../src/Constants\";\r\nimport { Order } from \"../src/StockMarket/Order\";\r\n//import { processOrders } from \"../src/StockMarket/OrderProcessing\";\r\nimport { Stock } from \"../src/StockMarket/Stock\";\r\n/*\r\nimport {\r\n    deleteStockMarket,\r\n    initStockMarket,\r\n    initSymbolToStockMap,\r\n    loadStockMarket,\r\n    StockMarket,\r\n    SymbolToStockMap,\r\n} from \"../src/StockMarket/StockMarket\";\r\n*/\r\nimport {\r\n    calculateIncreasingPriceMovement,\r\n    calculateDecreasingPriceMovement,\r\n    forecastChangePerPriceMovement,\r\n    getBuyTransactionCost,\r\n    getSellTransactionGain,\r\n    processBuyTransactionPriceMovement,\r\n    processSellTransactionPriceMovement,\r\n} from \"../src/StockMarket/StockMarketHelpers\";\r\nimport { OrderTypes } from \"../src/StockMarket/data/OrderTypes\"\r\nimport { PositionTypes } from \"../src/StockMarket/data/PositionTypes\";\r\n\r\nconst assert = chai.assert;\r\nconst expect = chai.expect;\r\n\r\nconsole.log(\"Beginning Stock Market Tests\");\r\n\r\ndescribe(\"Stock Market Tests\", function() {\r\n    const commission = CONSTANTS.StockMarketCommission;\r\n\r\n    // Generic Stock object that can be used by each test\r\n    let stock;\r\n    const ctorParams = {\r\n        b: true,\r\n        initPrice: 10e3,\r\n        marketCap: 5e9,\r\n        mv: 1,\r\n        name: \"MockStock\",\r\n        otlkMag: 10,\r\n        spreadPerc: 1,\r\n        shareTxForMovement: 5e3,\r\n        symbol: \"mock\",\r\n    };\r\n\r\n    beforeEach(function() {\r\n        function construct() {\r\n            stock = new Stock(ctorParams);\r\n        }\r\n\r\n        expect(construct).to.not.throw();\r\n    });\r\n\r\n    describe(\"Stock Class\", function() {\r\n        describe(\"constructor\", function() {\r\n            it(\"should have default parameters\", function() {\r\n                let defaultStock;\r\n                function construct() {\r\n                    defaultStock = new Stock();\r\n                }\r\n\r\n                expect(construct).to.not.throw();\r\n                expect(defaultStock.name).to.equal(\"\");\r\n            });\r\n\r\n            it(\"should properly initialize props from parameters\", function() {\r\n                expect(stock.name).to.equal(ctorParams.name);\r\n                expect(stock.symbol).to.equal(ctorParams.symbol);\r\n                expect(stock.price).to.equal(ctorParams.initPrice);\r\n                expect(stock.lastPrice).to.equal(ctorParams.initPrice);\r\n                expect(stock.b).to.equal(ctorParams.b);\r\n                expect(stock.mv).to.equal(ctorParams.mv);\r\n                expect(stock.shareTxForMovement).to.equal(ctorParams.shareTxForMovement);\r\n                expect(stock.shareTxUntilMovement).to.equal(ctorParams.shareTxForMovement);\r\n                expect(stock.maxShares).to.be.below(stock.totalShares);\r\n                expect(stock.spreadPerc).to.equal(ctorParams.spreadPerc);\r\n                expect(stock.priceMovementPerc).to.be.a(\"number\");\r\n                expect(stock.priceMovementPerc).to.be.at.most(stock.spreadPerc);\r\n                expect(stock.priceMovementPerc).to.be.at.least(0);\r\n            });\r\n\r\n            it (\"should properly initialize props from range-values\", function() {\r\n                let stock;\r\n                const params = {\r\n                    b: true,\r\n                    initPrice: {\r\n                        max: 10e3,\r\n                        min: 1e3,\r\n                    },\r\n                    marketCap: 5e9,\r\n                    mv: {\r\n                        divisor: 100,\r\n                        max: 150,\r\n                        min: 50,\r\n                    },\r\n                    name: \"MockStock\",\r\n                    otlkMag: 10,\r\n                    spreadPerc: {\r\n                        divisor: 10,\r\n                        max: 10,\r\n                        min: 1,\r\n                    },\r\n                    shareTxForMovement: {\r\n                        max: 10e3,\r\n                        min: 5e3,\r\n                    },\r\n                    symbol: \"mock\",\r\n                };\r\n\r\n                function construct() {\r\n                    stock = new Stock(params);\r\n                }\r\n\r\n                expect(construct).to.not.throw();\r\n                expect(stock.price).to.be.within(params.initPrice.min, params.initPrice.max);\r\n                expect(stock.mv).to.be.within(params.mv.min / params.mv.divisor, params.mv.max / params.mv.divisor);\r\n                expect(stock.spreadPerc).to.be.within(params.spreadPerc.min / params.spreadPerc.divisor, params.spreadPerc.max / params.spreadPerc.divisor);\r\n                expect(stock.shareTxForMovement).to.be.within(params.shareTxForMovement.min, params.shareTxForMovement.max);\r\n            });\r\n\r\n            it(\"should round the 'totalShare' prop to the nearest 100k\", function() {\r\n                expect(stock.totalShares % 100e3).to.equal(0);\r\n            });\r\n        });\r\n\r\n        describe(\"#changePrice()\", function() {\r\n            it(\"should set both the last price and current price properties\", function() {\r\n                const newPrice = 20e3;\r\n                stock.changePrice(newPrice);\r\n                expect(stock.lastPrice).to.equal(ctorParams.initPrice);\r\n                expect(stock.price).to.equal(newPrice);\r\n            });\r\n        });\r\n\r\n        describe(\"#getAskPrice()\", function() {\r\n            it(\"should return the price increased by spread percentage\", function() {\r\n                const perc = stock.spreadPerc / 100;\r\n                expect(perc).to.be.at.most(1);\r\n                expect(perc).to.be.at.least(0);\r\n\r\n                const expected = stock.price * (1 + perc);\r\n                expect(stock.getAskPrice()).to.equal(expected);\r\n            });\r\n        });\r\n\r\n        describe(\"#getBidPrice()\", function() {\r\n            it(\"should return the price decreased by spread percentage\", function() {\r\n                const perc = stock.spreadPerc / 100;\r\n                expect(perc).to.be.at.most(1);\r\n                expect(perc).to.be.at.least(0);\r\n\r\n                const expected = stock.price * (1 - perc);\r\n                expect(stock.getBidPrice()).to.equal(expected);\r\n            });\r\n        });\r\n    });\r\n\r\n    /*\r\n    // TODO These tests fail due to circular dependency errors\r\n    describe(\"StockMarket object\", function() {\r\n        describe(\"Initialization\", function() {\r\n            // Keeps track of initialized stocks. Contains their symbols\r\n            const stocks = [];\r\n\r\n            before(function() {\r\n                expect(initStockMarket).to.not.throw();\r\n                expect(initSymbolToStockMap).to.not.throw();\r\n            });\r\n\r\n            it(\"should have Stock objects\", function() {\r\n                for (const prop in StockMarket) {\r\n                    const stock = StockMarket[prop];\r\n                    if (stock instanceof Stock) {\r\n                        stocks.push(stock.symbol);\r\n                    }\r\n                }\r\n\r\n                // We'll just check that there are some stocks\r\n                expect(stocks.length).to.be.at.least(1);\r\n            });\r\n\r\n            it(\"should have an order book in the 'Orders' property\", function() {\r\n                expect(StockMarket).to.have.property(\"Orders\");\r\n\r\n                const orderbook = StockMarket[\"Orders\"];\r\n                for (const symbol of stocks) {\r\n                    const ordersForStock = orderbook[symbol];\r\n                    expect(ordersForStock).to.be.an(\"array\");\r\n                    expect(ordersForStock.length).to.equal(0);\r\n                }\r\n            });\r\n\r\n            it(\"should have properties for managing game cycles\", function() {\r\n                expect(StockMarket).to.have.property(\"storedCycles\");\r\n                expect(StockMarket).to.have.property(\"lastUpdate\");\r\n            });\r\n        });\r\n\r\n        // Because 'StockMarket' is a global object, the effects of initialization from\r\n        // the block above should still stand\r\n        describe(\"Deletion\", function() {\r\n            it(\"should set StockMarket to be an empty object\", function() {\r\n                expect(StockMarket).to.be.an(\"object\").that.is.not.empty;\r\n                deleteStockMarket();\r\n                expect(StockMarket).to.be.an(\"object\").that.is.empty;\r\n            });\r\n        });\r\n\r\n        // Reset stock market for each test\r\n        beforeEach(function() {\r\n            deleteStockMarket();\r\n            initStockMarket();\r\n            initSymbolToStockMap();\r\n        });\r\n\r\n        it(\"should properly initialize\", function() {\r\n\r\n        });\r\n    });\r\n    */\r\n\r\n    describe(\"Transaction Cost Calculator Functions\", function() {\r\n        describe(\"getBuyTransactionCost()\", function() {\r\n            it(\"should fail on invalid 'stock' argument\", function() {\r\n                const res = getBuyTransactionCost({}, 10, PositionTypes.Long);\r\n                expect(res).to.equal(null);\r\n            });\r\n\r\n            it(\"should fail on invalid 'shares' arg\", function() {\r\n                let res = getBuyTransactionCost(stock, NaN, PositionTypes.Long);\r\n                expect(res).to.equal(null);\r\n\r\n                res = getBuyTransactionCost(stock, -1, PositionTypes.Long);\r\n                expect(res).to.equal(null);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that doesn't trigger a price movement\", function() {\r\n                const shares = ctorParams.shareTxForMovement / 2;\r\n                const res = getBuyTransactionCost(stock, shares, PositionTypes.Long);\r\n                expect(res).to.equal(shares * stock.getAskPrice() + commission);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that doesn't trigger a price movement\", function() {\r\n                const shares = ctorParams.shareTxForMovement / 2;\r\n                const res = getBuyTransactionCost(stock, shares, PositionTypes.Short);\r\n                expect(res).to.equal(shares * stock.getBidPrice() + commission);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that trigger price movements\", function() {\r\n                const sharesPerMvmt = ctorParams.shareTxForMovement;\r\n                const shares = sharesPerMvmt * 3;\r\n                const res = getBuyTransactionCost(stock, shares, PositionTypes.Long);\r\n\r\n                // Calculate expected cost\r\n                const secondPrice = stock.getAskPrice() * calculateIncreasingPriceMovement(stock);\r\n                const thirdPrice = secondPrice * calculateIncreasingPriceMovement(stock);\r\n                let expected = (sharesPerMvmt * stock.getAskPrice()) + (sharesPerMvmt * secondPrice) + (sharesPerMvmt * thirdPrice);\r\n\r\n                expect(res).to.equal(expected + commission);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that trigger price movements\", function() {\r\n                const sharesPerMvmt = ctorParams.shareTxForMovement;\r\n                const shares = sharesPerMvmt * 3;\r\n                const res = getBuyTransactionCost(stock, shares, PositionTypes.Short);\r\n\r\n                // Calculate expected cost\r\n                const secondPrice = stock.getBidPrice() * calculateDecreasingPriceMovement(stock);\r\n                const thirdPrice = secondPrice * calculateDecreasingPriceMovement(stock);\r\n                let expected = (sharesPerMvmt * stock.getBidPrice()) + (sharesPerMvmt * secondPrice) + (sharesPerMvmt * thirdPrice);\r\n\r\n                expect(res).to.equal(expected + commission);\r\n            });\r\n\r\n            it(\"should cap the 'shares' argument at the stock's maximum number of shares\", function() {\r\n                const maxRes = getBuyTransactionCost(stock, stock.maxShares, PositionTypes.Long);\r\n                const exceedRes = getBuyTransactionCost(stock, stock.maxShares * 10, PositionTypes.Long);\r\n                expect(maxRes).to.equal(exceedRes);\r\n            });\r\n        });\r\n\r\n        describe(\"getSellTransactionGain()\", function() {\r\n            it(\"should fail on invalid 'stock' argument\", function() {\r\n                const res = getSellTransactionGain({}, 10, PositionTypes.Long);\r\n                expect(res).to.equal(null);\r\n            });\r\n\r\n            it(\"should fail on invalid 'shares' arg\", function() {\r\n                let res = getSellTransactionGain(stock, NaN, PositionTypes.Long);\r\n                expect(res).to.equal(null);\r\n\r\n                res = getSellTransactionGain(stock, -1, PositionTypes.Long);\r\n                expect(res).to.equal(null);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that doesn't trigger a price movement\", function() {\r\n                const shares = ctorParams.shareTxForMovement / 2;\r\n                const res = getSellTransactionGain(stock, shares, PositionTypes.Long);\r\n                const expected = shares * stock.getBidPrice() - commission;\r\n                expect(res).to.equal(expected);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that doesn't trigger a price movement\", function() {\r\n                // We need to set this property in order to calculate gains from short position\r\n                stock.playerAvgShortPx = stock.price * 2;\r\n\r\n                const shares = ctorParams.shareTxForMovement / 2;\r\n                const res = getSellTransactionGain(stock, shares, PositionTypes.Short);\r\n                const expected = (shares * stock.playerAvgShortPx) + (shares * (stock.playerAvgShortPx - stock.getAskPrice())) - commission;\r\n                expect(res).to.equal(expected);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that trigger price movements\", function() {\r\n                const sharesPerMvmt = ctorParams.shareTxForMovement;\r\n                const shares = sharesPerMvmt * 3;\r\n                const res = getSellTransactionGain(stock, shares, PositionTypes.Long);\r\n\r\n                // Calculated expected gain\r\n                const mvmt = calculateDecreasingPriceMovement(stock);\r\n                const secondPrice = stock.getBidPrice() * mvmt;\r\n                const thirdPrice = secondPrice * mvmt;\r\n                const expected = (sharesPerMvmt * stock.getBidPrice()) + (sharesPerMvmt * secondPrice) + (sharesPerMvmt * thirdPrice);\r\n\r\n                expect(res).to.equal(expected - commission);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that trigger price movements\", function() {\r\n                // We need to set this property in order to calculate gains from short position\r\n                stock.playerAvgShortPx = stock.price * 2;\r\n\r\n                const sharesPerMvmt = ctorParams.shareTxForMovement;\r\n                const shares = sharesPerMvmt * 3;\r\n                const res = getSellTransactionGain(stock, shares, PositionTypes.Short);\r\n\r\n                // Calculate expected gain\r\n                const mvmt = calculateIncreasingPriceMovement(stock);\r\n                const secondPrice = stock.getAskPrice() * mvmt;\r\n                const thirdPrice = secondPrice * mvmt;\r\n                function getGainForPrice(thisPrice) {\r\n                    const origCost = sharesPerMvmt * stock.playerAvgShortPx;\r\n                    return origCost + ((stock.playerAvgShortPx - thisPrice) * sharesPerMvmt);\r\n                }\r\n                const expected = getGainForPrice(stock.getAskPrice()) + getGainForPrice(secondPrice) + getGainForPrice(thirdPrice);\r\n\r\n                expect(res).to.equal(expected - commission);\r\n            });\r\n\r\n            it(\"should cap the 'shares' argument at the stock's maximum number of shares\", function() {\r\n                const maxRes = getSellTransactionGain(stock, stock.maxShares, PositionTypes.Long);\r\n                const exceedRes = getSellTransactionGain(stock, stock.maxShares * 10, PositionTypes.Long);\r\n                expect(maxRes).to.equal(exceedRes);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe(\"Price Movement Processor Functions\", function() {\r\n        // N = 1 is the original price\r\n        function getNthPriceIncreasing(origPrice, n) {\r\n            let price = origPrice;\r\n            for (let i = 1; i < n; ++i) {\r\n                price *= calculateIncreasingPriceMovement(stock);\r\n            }\r\n\r\n            return price;\r\n        }\r\n\r\n        // N = 1 is the original price\r\n        function getNthPriceDecreasing(origPrice, n) {\r\n            let price = origPrice;\r\n            for (let i = 1; i < n; ++i) {\r\n                price *= calculateDecreasingPriceMovement(stock);\r\n            }\r\n\r\n            return price;\r\n        }\r\n\r\n        // N = 1 is the original forecast\r\n        function getNthForecast(origForecast, n) {\r\n            return origForecast - forecastChangePerPriceMovement * (n - 1);\r\n        }\r\n\r\n        describe(\"processBuyTransactionPriceMovement()\", function() {\r\n            const noMvmtShares = Math.round(ctorParams.shareTxForMovement / 2.2);\r\n            const mvmtShares = ctorParams.shareTxForMovement * 3 + noMvmtShares;\r\n\r\n            it(\"should do nothing on invalid 'stock' argument\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldTracker = stock.shareTxUntilMovement;\r\n\r\n                processBuyTransactionPriceMovement({}, mvmtShares, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.shareTxUntilMovement).to.equal(oldTracker);\r\n            });\r\n\r\n            it(\"should do nothing on invalid 'shares' arg\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldTracker = stock.shareTxUntilMovement;\r\n\r\n                processBuyTransactionPriceMovement(stock, NaN, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.shareTxUntilMovement).to.equal(oldTracker);\r\n\r\n                processBuyTransactionPriceMovement(stock, -1, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.shareTxUntilMovement).to.equal(oldTracker);\r\n            });\r\n\r\n            it(\"should properly evaluate a LONG transaction that doesn't trigger a price movement\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, noMvmtShares, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.otlkMag).to.equal(oldForecast);\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate a SHORT transaction that doesn't trigger a price movement\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, noMvmtShares, PositionTypes.Short);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.otlkMag).to.equal(oldForecast);\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that trigger price movements\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, mvmtShares, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that trigger price movements\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, mvmtShares, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions of exactly 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, stock.shareTxForMovement, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that total to 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, Math.round(stock.shareTxForMovement / 2), PositionTypes.Long);\r\n                processBuyTransactionPriceMovement(stock, stock.shareTxUntilMovement, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that are a multiple of 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, 3 * stock.shareTxForMovement, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions of exactly 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, stock.shareTxForMovement, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that total to 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, Math.round(stock.shareTxForMovement / 2), PositionTypes.Short);\r\n                processBuyTransactionPriceMovement(stock, stock.shareTxUntilMovement, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that are a multiple of 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processBuyTransactionPriceMovement(stock, 3 * stock.shareTxForMovement, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n        });\r\n\r\n        describe(\"processSellTransactionPriceMovement()\", function() {\r\n            const noMvmtShares = Math.round(ctorParams.shareTxForMovement / 2.2);\r\n            const mvmtShares = ctorParams.shareTxForMovement * 3 + noMvmtShares;\r\n\r\n            it(\"should do nothing on invalid 'stock' argument\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldTracker = stock.shareTxUntilMovement;\r\n\r\n                processSellTransactionPriceMovement({}, mvmtShares, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.shareTxUntilMovement).to.equal(oldTracker);\r\n            });\r\n\r\n            it(\"should do nothing on invalid 'shares' arg\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldTracker = stock.shareTxUntilMovement;\r\n\r\n                processSellTransactionPriceMovement(stock, NaN, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.shareTxUntilMovement).to.equal(oldTracker);\r\n\r\n                processSellTransactionPriceMovement(stock, -1, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.shareTxUntilMovement).to.equal(oldTracker);\r\n            });\r\n\r\n            it(\"should properly evaluate a LONG transaction that doesn't trigger a price movement\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, noMvmtShares, PositionTypes.Long);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.otlkMag).to.equal(oldForecast);\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate a SHORT transaction that doesn't trigger a price movement\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, noMvmtShares, PositionTypes.Short);\r\n                expect(stock.price).to.equal(oldPrice);\r\n                expect(stock.otlkMag).to.equal(oldForecast);\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that trigger price movements\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, mvmtShares, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that trigger price movements\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, mvmtShares, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement - noMvmtShares);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions of exactly 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, stock.shareTxForMovement, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that total to 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, Math.round(stock.shareTxForMovement / 2), PositionTypes.Long);\r\n                processSellTransactionPriceMovement(stock, stock.shareTxUntilMovement, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate LONG transactions that are a multiple of 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, 3 * stock.shareTxForMovement, PositionTypes.Long);\r\n                expect(stock.price).to.equal(getNthPriceDecreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions of exactly 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, stock.shareTxForMovement, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that total to 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, Math.round(stock.shareTxForMovement / 2), PositionTypes.Short);\r\n                processSellTransactionPriceMovement(stock, stock.shareTxUntilMovement, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 2));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 2));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n\r\n            it(\"should properly evaluate SHORT transactions that are a multiple of 'shareTxForMovement' shares\", function() {\r\n                const oldPrice = stock.price;\r\n                const oldForecast = stock.otlkMag;\r\n\r\n                processSellTransactionPriceMovement(stock, 3 * stock.shareTxForMovement, PositionTypes.Short);\r\n                expect(stock.price).to.equal(getNthPriceIncreasing(oldPrice, 4));\r\n                expect(stock.otlkMag).to.equal(getNthForecast(oldForecast, 4));\r\n                expect(stock.shareTxUntilMovement).to.equal(stock.shareTxForMovement);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe(\"Order Class\", function() {\r\n        it(\"should throw on invalid arguments\", function() {\r\n            function invalid1() {\r\n                return new Order({}, 1, 1, OrderTypes.LimitBuy, PositionTypes.Long);\r\n            }\r\n            function invalid2() {\r\n                return new Order(\"FOO\", \"z\", 0, OrderTypes.LimitBuy, PositionTypes.Short);\r\n            }\r\n            function invalid3() {\r\n                return new Order(\"FOO\", 1, {}, OrderTypes.LimitBuy, PositionTypes.Short);\r\n            }\r\n            function invalid4() {\r\n                return new Order(\"FOO\", 1, NaN, OrderTypes.LimitBuy, PositionTypes.Short);\r\n            }\r\n            function invalid5() {\r\n                return new Order(\"FOO\", NaN, 0, OrderTypes.LimitBuy, PositionTypes.Short);\r\n            }\r\n\r\n            expect(invalid1).to.throw();\r\n            expect(invalid2).to.throw();\r\n            expect(invalid3).to.throw();\r\n            expect(invalid4).to.throw();\r\n            expect(invalid5).to.throw();\r\n        });\r\n    });\r\n\r\n    describe(\"Order Processing\", function() {\r\n\r\n    });\r\n});\r\n","/**\r\n * TODO This should also test the calcualteRamUsage() function from\r\n * /Script/RamCalculations but there's some issues with getting tests to run\r\n * when any npm package is included in the build (/Script/RamCalculations includes\r\n * walk from acorn).\r\n */\r\nimport { getRamCost } from \"../../src/Netscript/RamCostGenerator\";\r\n//import { calculateRamUsage } from \"../../src/Script/RamCalculations\"\r\n\r\nconst assert = chai.assert;\r\nconst expect = chai.expect;\r\n\r\nconsole.log(\"Beginning Netscript Static RAM Calculation/Generation Tests\");\r\n\r\ndescribe(\"Netscript Static RAM Calculation/Generation Tests\", function() {\r\n    it(\"should run\", function() {\r\n        expect(1).to.equal(1);\r\n    });\r\n});\r\n","export enum PositionTypes {\r\n    Long = \"L\",\r\n    Short = \"S\"\r\n}\r\n","import { Stock } from \"./Stock\";\r\nimport { PositionTypes } from \"./data/PositionTypes\";\r\nimport { CONSTANTS } from \"../Constants\";\r\n\r\n// Amount by which a stock's forecast changes during each price movement\r\nexport const forecastChangePerPriceMovement = 0.1;\r\n\r\n/**\r\n * Given a stock, calculates the amount by which the stock price is multiplied\r\n * for an 'upward' price movement. This does not actually increase the stock's price,\r\n * just calculates the multiplier\r\n * @param {Stock} stock - Stock for price movement\r\n * @returns {number | null} Number by which stock's price should be multiplied. Null for invalid args\r\n */\r\nexport function calculateIncreasingPriceMovement(stock: Stock): number | null {\r\n    if (!(stock instanceof Stock)) { return null; }\r\n\r\n    return (1 + (stock.priceMovementPerc / 100));\r\n}\r\n\r\n/**\r\n * Given a stock, calculates the amount by which the stock price is multiplied\r\n * for a \"downward\" price movement. This does not actually increase the stock's price,\r\n * just calculates the multiplier\r\n * @param {Stock} stock - Stock for price movement\r\n * @returns {number | null} Number by which stock's price should be multiplied. Null for invalid args\r\n */\r\nexport function calculateDecreasingPriceMovement(stock: Stock): number | null {\r\n    if (!(stock instanceof Stock)) { return null; }\r\n\r\n    return (1 - (stock.priceMovementPerc / 100));\r\n}\r\n\r\n\r\n/**\r\n * Calculate the total cost of a \"buy\" transaction. This accounts for spread,\r\n * price movements, and commission.\r\n * @param {Stock} stock - Stock being purchased\r\n * @param {number} shares - Number of shares being transacted\r\n * @param {PositionTypes} posType - Long or short position\r\n * @returns {number | null} Total transaction cost. Returns null for an invalid transaction\r\n */\r\nexport function getBuyTransactionCost(stock: Stock, shares: number, posType: PositionTypes): number | null {\r\n    if (isNaN(shares) || shares <= 0 || !(stock instanceof Stock)) { return null; }\r\n\r\n    // Cap the 'shares' arg at the stock's maximum shares. This'll prevent\r\n    // hanging in the case when a really big number is passed in\r\n    shares = Math.min(shares, stock.maxShares);\r\n\r\n    const isLong = (posType === PositionTypes.Long);\r\n\r\n    // If the number of shares doesn't trigger a price movement, its a simple calculation\r\n    if (shares <= stock.shareTxUntilMovement) {\r\n        if (isLong) {\r\n            return (shares * stock.getAskPrice()) + CONSTANTS.StockMarketCommission;\r\n        } else {\r\n            return (shares * stock.getBidPrice()) + CONSTANTS.StockMarketCommission;\r\n        }\r\n    }\r\n\r\n    // Calculate how many iterations of price changes we need to account for\r\n    let remainingShares = shares - stock.shareTxUntilMovement;\r\n    let numIterations = 1 + Math.ceil(remainingShares / stock.shareTxForMovement);\r\n\r\n    // The initial cost calculation takes care of the first \"iteration\"\r\n    let currPrice = isLong ? stock.getAskPrice() : stock.getBidPrice();\r\n    let totalCost = (stock.shareTxUntilMovement * currPrice);\r\n\r\n    const increasingMvmt = calculateIncreasingPriceMovement(stock)!;\r\n    const decreasingMvmt = calculateDecreasingPriceMovement(stock)!;\r\n\r\n    function processPriceMovement() {\r\n        if (isLong) {\r\n            currPrice *= increasingMvmt;\r\n        } else {\r\n            currPrice *= decreasingMvmt;\r\n        }\r\n    }\r\n\r\n    for (let i = 1; i < numIterations; ++i) {\r\n        processPriceMovement();\r\n\r\n        const amt = Math.min(stock.shareTxForMovement, remainingShares);\r\n        totalCost += (amt * currPrice);\r\n        remainingShares -= amt;\r\n    }\r\n\r\n    return totalCost + CONSTANTS.StockMarketCommission;\r\n}\r\n\r\n/**\r\n * Processes a buy transaction's resulting price AND forecast movement.\r\n * @param {Stock} stock - Stock being purchased\r\n * @param {number} shares - Number of shares being transacted\r\n * @param {PositionTypes} posType - Long or short position\r\n */\r\nexport function processBuyTransactionPriceMovement(stock: Stock, shares: number, posType: PositionTypes): void {\r\n    if (isNaN(shares) || shares <= 0 || !(stock instanceof Stock)) { return; }\r\n\r\n    // Cap the 'shares' arg at the stock's maximum shares. This'll prevent\r\n    // hanging in the case when a really big number is passed in\r\n    shares = Math.min(shares, stock.maxShares);\r\n\r\n    const isLong = (posType === PositionTypes.Long);\r\n\r\n    let currPrice = stock.price;\r\n    function processPriceMovement() {\r\n        if (isLong) {\r\n            currPrice *= calculateIncreasingPriceMovement(stock)!;\r\n        } else {\r\n            currPrice *= calculateDecreasingPriceMovement(stock)!;\r\n        }\r\n    }\r\n\r\n    // No price/forecast movement\r\n    if (shares <= stock.shareTxUntilMovement) {\r\n        stock.shareTxUntilMovement -= shares;\r\n        if (stock.shareTxUntilMovement <= 0) {\r\n            stock.shareTxUntilMovement = stock.shareTxForMovement;\r\n            processPriceMovement();\r\n            stock.changePrice(currPrice);\r\n            stock.otlkMag -= (forecastChangePerPriceMovement);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    // Calculate how many iterations of price changes we need to account for\r\n    let remainingShares = shares - stock.shareTxUntilMovement;\r\n    let numIterations = 1 + Math.ceil(remainingShares / stock.shareTxForMovement);\r\n\r\n    for (let i = 1; i < numIterations; ++i) {\r\n        processPriceMovement();\r\n    }\r\n\r\n    stock.shareTxUntilMovement = stock.shareTxForMovement - ((shares - stock.shareTxUntilMovement) % stock.shareTxForMovement);\r\n    if (stock.shareTxUntilMovement === stock.shareTxForMovement || stock.shareTxUntilMovement <= 0) {\r\n        // The shareTxUntilMovement ended up at 0 at the end of the \"processing\"\r\n        ++numIterations;\r\n        stock.shareTxUntilMovement = stock.shareTxForMovement;\r\n        processPriceMovement();\r\n    }\r\n    stock.changePrice(currPrice);\r\n\r\n    // Forecast always decreases in magnitude\r\n    const forecastChange = Math.min(5, forecastChangePerPriceMovement * (numIterations - 1));\r\n    stock.otlkMag -= forecastChange;\r\n    if (stock.otlkMag < 0) {\r\n        stock.b = !stock.b;\r\n        stock.otlkMag = Math.abs(stock.otlkMag);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculate the TOTAL amount of money gained from a sale (NOT net profit). This accounts\r\n * for spread, price movements, and commission.\r\n * @param {Stock} stock - Stock being sold\r\n * @param {number} shares - Number of sharse being transacted\r\n * @param {PositionTypes} posType - Long or short position\r\n * @returns {number | null} Amount of money gained from transaction. Returns null for an invalid transaction\r\n */\r\nexport function getSellTransactionGain(stock: Stock, shares: number, posType: PositionTypes): number | null {\r\n    if (isNaN(shares) || shares <= 0 || !(stock instanceof Stock)) { return null; }\r\n\r\n    // Cap the 'shares' arg at the stock's maximum shares. This'll prevent\r\n    // hanging in the case when a really big number is passed in\r\n    shares = Math.min(shares, stock.maxShares);\r\n\r\n    const isLong = (posType === PositionTypes.Long);\r\n\r\n    // If the number of shares doesn't trigger a price mvoement, its a simple calculation\r\n    if (shares <= stock.shareTxUntilMovement) {\r\n        if (isLong) {\r\n            return (shares * stock.getBidPrice()) - CONSTANTS.StockMarketCommission;\r\n        } else {\r\n            // Calculating gains for a short position requires calculating the profit made\r\n            const origCost = shares * stock.playerAvgShortPx;\r\n            const profit = ((stock.playerAvgShortPx - stock.getAskPrice()) * shares) - CONSTANTS.StockMarketCommission;\r\n\r\n            return origCost + profit;\r\n        }\r\n    }\r\n\r\n    // Calculate how many iterations of price changes we need to account for\r\n    let remainingShares = shares - stock.shareTxUntilMovement;\r\n    let numIterations = 1 + Math.ceil(remainingShares / stock.shareTxForMovement);\r\n\r\n    // Helper function to calculate gain for a single iteration\r\n    function calculateGain(thisPrice: number, thisShares: number) {\r\n        if (isLong) {\r\n            return thisShares * thisPrice;\r\n        } else {\r\n            const origCost = thisShares * stock.playerAvgShortPx;\r\n            const profit = ((stock.playerAvgShortPx - thisPrice) * thisShares);\r\n\r\n            return origCost + profit;\r\n        }\r\n    }\r\n\r\n    // The initial cost calculation takes care of the first \"iteration\"\r\n    let currPrice = isLong ? stock.getBidPrice() : stock.getAskPrice();\r\n    let totalGain = calculateGain(currPrice, stock.shareTxUntilMovement);\r\n    for (let i = 1; i < numIterations; ++i) {\r\n        // Price movement\r\n        if (isLong) {\r\n            currPrice *= calculateDecreasingPriceMovement(stock)!;\r\n        } else {\r\n            currPrice *= calculateIncreasingPriceMovement(stock)!;\r\n        }\r\n\r\n        const amt = Math.min(stock.shareTxForMovement, remainingShares);\r\n        totalGain += calculateGain(currPrice, amt);\r\n        remainingShares -= amt;\r\n    }\r\n\r\n    return totalGain - CONSTANTS.StockMarketCommission;\r\n}\r\n\r\n/**\r\n * Processes a sell transaction's resulting price movement\r\n * @param {Stock} stock - Stock being sold\r\n * @param {number} shares - Number of sharse being transacted\r\n * @param {PositionTypes} posType - Long or short position\r\n */\r\nexport function processSellTransactionPriceMovement(stock: Stock, shares: number, posType: PositionTypes): void {\r\n    if (isNaN(shares) || shares <= 0 || !(stock instanceof Stock)) { return; }\r\n\r\n    // Cap the 'shares' arg at the stock's maximum shares. This'll prevent\r\n    // hanging in the case when a really big number is passed in\r\n    shares = Math.min(shares, stock.maxShares);\r\n\r\n    const isLong = (posType === PositionTypes.Long);\r\n\r\n    let currPrice = stock.price;\r\n    function processPriceMovement() {\r\n        if (isLong) {\r\n            currPrice *= calculateDecreasingPriceMovement(stock)!;\r\n        } else {\r\n            currPrice *= calculateIncreasingPriceMovement(stock)!;\r\n        }\r\n    }\r\n\r\n    // No price/forecast movement\r\n    if (shares <= stock.shareTxUntilMovement) {\r\n        stock.shareTxUntilMovement -= shares;\r\n        if (stock.shareTxUntilMovement <= 0) {\r\n            stock.shareTxUntilMovement = stock.shareTxForMovement;\r\n            processPriceMovement();\r\n            stock.changePrice(currPrice);\r\n            stock.otlkMag -= (forecastChangePerPriceMovement);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    // Calculate how many iterations of price changes we need to account for\r\n    let remainingShares = shares - stock.shareTxUntilMovement;\r\n    let numIterations = 1 + Math.ceil(remainingShares / stock.shareTxForMovement);\r\n\r\n    for (let i = 1; i < numIterations; ++i) {\r\n        processPriceMovement();\r\n    }\r\n\r\n    stock.shareTxUntilMovement = stock.shareTxForMovement - ((shares - stock.shareTxUntilMovement) % stock.shareTxForMovement);\r\n    if (stock.shareTxUntilMovement === stock.shareTxForMovement || stock.shareTxUntilMovement <= 0) {\r\n        ++numIterations;\r\n        stock.shareTxUntilMovement = stock.shareTxForMovement;\r\n        processPriceMovement();\r\n    }\r\n    stock.changePrice(currPrice);\r\n\r\n    // Forecast always decreases in magnitude\r\n    const forecastChange = Math.min(5, forecastChangePerPriceMovement * (numIterations - 1));\r\n    stock.otlkMag -= forecastChange;\r\n    if (stock.otlkMag < 0) {\r\n        stock.b = !stock.b;\r\n        stock.otlkMag = Math.abs(stock.otlkMag);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculate the maximum number of shares of a stock that can be purchased.\r\n * Handles mid-transaction price movements, both L and S positions, etc.\r\n * Used for the \"Buy Max\" button in the UI\r\n * @param {Stock} stock - Stock being purchased\r\n * @param {PositionTypes} posType - Long or short position\r\n * @param {number} money - Amount of money player has\r\n * @returns maximum number of shares that the player can purchase\r\n */\r\nexport function calculateBuyMaxAmount(stock: Stock, posType: PositionTypes, money: number): number {\r\n    if (!(stock instanceof Stock)) { return 0; }\r\n\r\n    const isLong = (posType === PositionTypes.Long);\r\n\r\n    const increasingMvmt = calculateIncreasingPriceMovement(stock);\r\n    const decreasingMvmt = calculateDecreasingPriceMovement(stock);\r\n    if (increasingMvmt == null || decreasingMvmt == null) { return 0; }\r\n\r\n    let remainingMoney = money - CONSTANTS.StockMarketCommission;\r\n    let currPrice = isLong ? stock.getAskPrice() : stock.getBidPrice();\r\n\r\n    // No price movement\r\n    const firstIterationCost = stock.shareTxUntilMovement * currPrice;\r\n    if (remainingMoney < firstIterationCost) {\r\n        return Math.floor(remainingMoney / currPrice);\r\n    }\r\n\r\n    // We'll avoid any accidental infinite loops by having a hardcoded maximum number of\r\n    // iterations\r\n    let numShares = stock.shareTxUntilMovement;\r\n    remainingMoney -= firstIterationCost;\r\n    for (let i = 0; i < 10e3; ++i) {\r\n        if (isLong) {\r\n            currPrice *= increasingMvmt;\r\n        } else {\r\n            currPrice *= decreasingMvmt;\r\n        }\r\n\r\n        const affordableShares = Math.floor(remainingMoney / currPrice);\r\n        const actualShares = Math.min(stock.shareTxForMovement, affordableShares);\r\n\r\n        // Can't afford any more, so we're done\r\n        if (actualShares <= 0) { break; }\r\n\r\n        numShares += actualShares;\r\n\r\n        let cost = actualShares * currPrice;\r\n        remainingMoney -= cost;\r\n\r\n        if (remainingMoney <= 0) { break; }\r\n    }\r\n\r\n    return Math.floor(numShares);\r\n}\r\n","export * from \"./Netscript/StaticRamCalculationTests\";\r\nexport * from \"./StockMarketTests\";\r\n","export enum OrderTypes {\r\n    LimitBuy = \"Limit Buy Order\",\r\n    LimitSell = \"Limit Sell Order\",\r\n    StopBuy = \"Stop Buy Order\",\r\n    StopSell = \"Stop Sell Order\"\r\n}\r\n","import { IMinMaxRange } from \"../types\";\r\nimport {\r\n    Generic_fromJSON,\r\n    Generic_toJSON,\r\n    Reviver\r\n} from \"../../utils/JSONReviver\";\r\nimport { getRandomInt } from \"../../utils/helpers/getRandomInt\";\r\n\r\nexport interface IConstructorParams {\r\n    b: boolean;\r\n    initPrice: number | IMinMaxRange;\r\n    marketCap: number;\r\n    mv: number | IMinMaxRange;\r\n    name: string;\r\n    otlkMag: number;\r\n    spreadPerc: number | IMinMaxRange;\r\n    shareTxForMovement: number | IMinMaxRange;\r\n    symbol: string;\r\n}\r\n\r\nconst defaultConstructorParams: IConstructorParams = {\r\n    b: true,\r\n    initPrice: 10e3,\r\n    marketCap: 1e12,\r\n    mv: 1,\r\n    name: \"\",\r\n    otlkMag: 0,\r\n    spreadPerc: 0,\r\n    shareTxForMovement: 1e6,\r\n    symbol: \"\",\r\n}\r\n\r\n// Helper function that convert a IMinMaxRange to a number\r\nfunction toNumber(n: number | IMinMaxRange): number {\r\n    let value: number;\r\n    switch (typeof n) {\r\n        case \"number\": {\r\n            return <number>n;\r\n        }\r\n        case \"object\": {\r\n            const range = <IMinMaxRange>n;\r\n            value = getRandomInt(range.min, range.max);\r\n            break;\r\n        }\r\n        default:\r\n            throw Error(`Do not know how to convert the type '${typeof n}' to a number`);\r\n    }\r\n\r\n    if (typeof n === \"object\" && typeof n.divisor === \"number\") {\r\n        return value / n.divisor;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/**\r\n * Represents the valuation of a company in the World Stock Exchange.\r\n */\r\nexport class Stock {\r\n    /**\r\n     * Initializes a Stock from a JSON save state\r\n     */\r\n    static fromJSON(value: any): Stock {\r\n        return Generic_fromJSON(Stock, value.data);\r\n    }\r\n\r\n    /**\r\n     * Bear or bull (more likely to go up or down, based on otlkMag)\r\n     */\r\n    b: boolean;\r\n\r\n    /**\r\n     * Maximum price of a stock (per share)\r\n     */\r\n    readonly cap: number;\r\n\r\n    /**\r\n     * Stocks previous share price\r\n     */\r\n    lastPrice: number;\r\n\r\n    /**\r\n     * Maximum number of shares that player can own (both long and short combined)\r\n     */\r\n    readonly maxShares: number;\r\n\r\n    /**\r\n     * Maximum volatility\r\n     */\r\n    readonly mv: number;\r\n\r\n    /**\r\n     * Name of the company that the stock is for\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Outlook magnitude. Represents the stock's forecast and likelihood\r\n     * of increasing/decreasing (based on whether its in bear or bull mode)\r\n     */\r\n    otlkMag: number;\r\n\r\n    /**\r\n     * Average price of stocks that the player owns in the LONG position\r\n     */\r\n    playerAvgPx: number;\r\n\r\n    /**\r\n     * Average price of stocks that the player owns in the SHORT position\r\n     */\r\n    playerAvgShortPx: number;\r\n\r\n    /**\r\n     * Number of shares the player owns in the LONG position\r\n     */\r\n    playerShares: number;\r\n\r\n    /**\r\n     * Number of shares the player owns in the SHORT position\r\n     */\r\n    playerShortShares: number;\r\n\r\n    /**\r\n     * Stock's share price\r\n     */\r\n    price: number;\r\n\r\n    /**\r\n     * Percentage by which the stock's price changes for a transaction-induced\r\n     * price movement.\r\n     */\r\n    readonly priceMovementPerc: number;\r\n\r\n    /**\r\n     * How many shares need to be transacted in order to trigger a price movement\r\n     */\r\n    readonly shareTxForMovement: number;\r\n\r\n    /**\r\n     * How many share transactions remaining until a price movement occurs\r\n     */\r\n    shareTxUntilMovement: number;\r\n\r\n    /**\r\n     * Spread percentage. The bid/ask prices for this stock are N% above or below\r\n     * the \"real price\" to emulate spread.\r\n     */\r\n    readonly spreadPerc: number;\r\n\r\n    /**\r\n     * The stock's ticker symbol\r\n     */\r\n    readonly symbol: string;\r\n\r\n    /**\r\n     * Total number of shares of this stock\r\n     * This is different than maxShares, as this is like authorized stock while\r\n     * maxShares is outstanding stock.\r\n     */\r\n    readonly totalShares: number;\r\n\r\n    constructor(p: IConstructorParams = defaultConstructorParams) {\r\n        this.name                   = p.name;\r\n        this.symbol                 = p.symbol;\r\n        this.price                  = toNumber(p.initPrice);\r\n        this.lastPrice              = this.price;\r\n        this.playerShares           = 0;\r\n        this.playerAvgPx            = 0;\r\n        this.playerShortShares      = 0;\r\n        this.playerAvgShortPx       = 0;\r\n        this.mv                     = toNumber(p.mv);\r\n        this.b                      = p.b;\r\n        this.otlkMag                = p.otlkMag;\r\n        this.cap                    = getRandomInt(this.price * 1e3, this.price * 25e3);\r\n        this.spreadPerc             = toNumber(p.spreadPerc);\r\n        this.priceMovementPerc      = this.spreadPerc / (getRandomInt(10, 30) / 10);\r\n        this.shareTxForMovement     = toNumber(p.shareTxForMovement);\r\n        this.shareTxUntilMovement   = this.shareTxForMovement;\r\n\r\n        // Total shares is determined by market cap, and is rounded to nearest 100k\r\n        let totalSharesUnrounded: number = (p.marketCap / this.price);\r\n        this.totalShares = Math.round(totalSharesUnrounded / 1e5) * 1e5;\r\n\r\n        // Max Shares (Outstanding shares) is a percentage of total shares\r\n        const outstandingSharePercentage: number = 0.2;\r\n        this.maxShares = Math.round((this.totalShares * outstandingSharePercentage) / 1e5) * 1e5;\r\n    }\r\n\r\n    changePrice(newPrice: number): void {\r\n        this.lastPrice = this.price;\r\n        this.price = newPrice;\r\n    }\r\n\r\n    /**\r\n     * Return the price at which YOUR stock is bought (market ask price). Accounts for spread\r\n     */\r\n    getAskPrice(): number {\r\n        return this.price * (1 + (this.spreadPerc / 100));\r\n    }\r\n\r\n    /**\r\n     * Return the price at which YOUR stock is sold (market bid price). Accounts for spread\r\n     */\r\n    getBidPrice(): number {\r\n        return this.price * (1 - (this.spreadPerc / 100));\r\n    }\r\n\r\n    /**\r\n     * Serialize the Stock to a JSON save state.\r\n     */\r\n    toJSON(): any {\r\n        return Generic_toJSON(\"Stock\", this);\r\n    }\r\n}\r\n\r\nReviver.constructors.Stock = Stock;\r\n","/**\r\n * Generic Game Constants\r\n *\r\n * Constants for specific mechanics or features will NOT be here.\r\n */\r\nimport { IMap } from \"./types\";\r\n\r\nexport let CONSTANTS: IMap<any> = {\r\n    Version:                \"0.46.3\",\r\n\r\n\t/** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\r\n     * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\r\n     * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\r\n     */\r\n\tMaxSkillLevel: \t\t\t975,\r\n\r\n    // Milliseconds per game cycle\r\n    MilliPerCycle: 200,\r\n\r\n    // How much reputation is needed to join a megacorporation's faction\r\n    CorpFactionRepRequirement: 200e3,\r\n\r\n    // Base RAM costs\r\n    BaseCostFor1GBOfRamHome: 32000,\r\n    BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\r\n\r\n    // Cost to travel to another city\r\n    TravelCost: 200e3,\r\n\r\n    // Faction and Company favor-related things\r\n    BaseFavorToDonate: 150,\r\n    DonateMoneyToRepDivisor: 1e6,\r\n    FactionReputationToFavorBase: 500,\r\n    FactionReputationToFavorMult: 1.02,\r\n    CompanyReputationToFavorBase: 500,\r\n    CompanyReputationToFavorMult: 1.02,\r\n\r\n    // NeuroFlux Governor Augmentation cost multiplier\r\n    NeuroFluxGovernorLevelMult: 1.14,\r\n\r\n    NumNetscriptPorts: 20,\r\n\r\n    // Server-related constants\r\n    HomeComputerMaxRam: 1073741824, // 2 ^ 30\r\n    ServerBaseGrowthRate: 1.03,     // Unadjusted Growth rate\r\n    ServerMaxGrowthRate: 1.0035,    // Maximum possible growth rate (max rate accounting for server security)\r\n    ServerFortifyAmount: 0.002,     // Amount by which server's security increases when its hacked/grown\r\n    ServerWeakenAmount: 0.05,       // Amount by which server's security decreases when weakened\r\n\r\n    PurchasedServerLimit: 25,\r\n    PurchasedServerMaxRam: 1048576, // 2^20\r\n\r\n    // Augmentation Constants\r\n    AugmentationCostMultiplier: 5,  // Used for balancing costs without having to readjust every Augmentation cost\r\n    AugmentationRepMultiplier: 2.5, // Used for balancing rep cost without having to readjust every value\r\n    MultipleAugMultiplier: 1.9,\r\n\r\n    // TOR Router\r\n    TorRouterCost: 200e3,\r\n\r\n    // Infiltration\r\n    InfiltrationBribeBaseAmount: 100e3,    //Amount per clearance level\r\n    InfiltrationMoneyValue: 5e3,            //Convert \"secret\" value to money\r\n    InfiltrationRepValue: 1.4,             //Convert \"secret\" value to faction reputation\r\n    InfiltrationExpPow: 0.8,\r\n\r\n    // Stock market\r\n    WSEAccountCost: 200e6,\r\n    TIXAPICost: 5e9,\r\n    MarketData4SCost: 1e9,\r\n    MarketDataTixApi4SCost: 25e9,\r\n    StockMarketCommission: 100e3,\r\n\r\n    // Hospital/Health\r\n    HospitalCostPerHp: 100e3,\r\n\r\n    // Intelligence-related constants\r\n    IntelligenceCrimeWeight: 0.05, // Weight for how much int affects crime success rates\r\n    IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\r\n    IntelligenceCrimeBaseExpGain: 0.001,\r\n    IntelligenceProgramBaseExpGain: 500, // Program required hack level divided by this to determine int exp gain\r\n    IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\r\n    IntelligenceSingFnBaseExpGain: 0.002,\r\n    IntelligenceClassBaseExpGain: 0.000001,\r\n    IntelligenceHackingMissionBaseExpGain: 0.03, // Hacking Mission difficulty multiplied by this to get exp gain\r\n\r\n    // Hacking Missions\r\n    // TODO Move this into Hacking Mission implementation\r\n    HackingMissionRepToDiffConversion: 10000, // Faction rep is divided by this to get mission difficulty\r\n    HackingMissionRepToRewardConversion: 7, // Faction rep divided byt his to get mission rep reward\r\n    HackingMissionSpamTimeIncrease: 25000, // How much time limit increase is gained when conquering a Spam Node (ms)\r\n    HackingMissionTransferAttackIncrease: 1.05, // Multiplier by which the attack for all Core Nodes is increased when conquering a Transfer Node\r\n    HackingMissionMiscDefenseIncrease: 1.05, // The amount by which every misc node's defense is multiplied when one is conquered\r\n    HackingMissionDifficultyToHacking: 135, // Difficulty is multiplied by this to determine enemy's \"hacking\" level (to determine effects of scan/attack, etc)\r\n    HackingMissionHowToPlay: \"Hacking missions are a minigame that, if won, will reward you with faction reputation.<br><br>\" +\r\n                             \"In this game you control a set of Nodes and use them to try and defeat an enemy. Your Nodes \" +\r\n                             \"are colored blue, while the enemy's are red. There are also other nodes on the map colored gray \" +\r\n                             \"that initially belong to neither you nor the enemy. The goal of the game is \" +\r\n                             \"to capture all of the enemy's Database nodes within the time limit. \" +\r\n                             \"If you fail to do this, you will lose.<br><br>\" +\r\n                             \"Each Node has three stats: Attack, Defense, and HP. There are five different actions that \" +\r\n                             \"a Node can take:<br><br> \" +\r\n                             \"Attack - Targets an enemy Node and lowers its HP. The effectiveness is determined by the owner's Attack, the Player's \" +\r\n                             \"hacking level, and the enemy's defense.<br><br>\" +\r\n                             \"Scan - Targets an enemy Node and lowers its Defense. The effectiveness is determined by the owner's Attack, the Player's hacking level, and the \" +\r\n                             \"enemy's defense.<br><br>\"  +\r\n                             \"Weaken - Targets an enemy Node and lowers its Attack. The effectiveness is determined by the owner's Attack, the Player's hacking level, and the enemy's \" +\r\n                             \"defense.<br><br>\" +\r\n                             \"Fortify - Raises the Node's Defense. The effectiveness is determined by your hacking level.<br><br>\" +\r\n                             \"Overflow - Raises the Node's Attack but lowers its Defense. The effectiveness is determined by your hacking level.<br><br>\" +\r\n                             \"Note that when determining the effectiveness of the above actions, the TOTAL Attack or Defense of the team is used, not just the \" +\r\n                             \"Attack/Defense of the individual Node that is performing the action.<br><br>\" +\r\n                             \"To capture a Node, you must lower its HP down to 0.<br><br>\" +\r\n                             \"There are six different types of Nodes:<br><br>\" +\r\n                             \"CPU Core - These are your main Nodes that are used to perform actions. Capable of performing every action<br><br>\" +\r\n                             \"Firewall - Nodes with high defense. These Nodes can 'Fortify'<br><br>\" +\r\n                             \"Database - A special type of Node. The player's objective is to conquer all of the enemy's Database Nodes within \" +\r\n                             \"the time limit. These Nodes cannot perform any actions<br><br>\"  +\r\n                             \"Spam - Conquering one of these Nodes will slow the enemy's trace, giving the player additional time to complete \" +\r\n                             \"the mission. These Nodes cannot perform any actions<br><br>\" +\r\n                             \"Transfer - Conquering one of these nodes will increase the Attack of all of your CPU Cores by a small fixed percentage. \" +\r\n                             \"These Nodes are capable of performing every action except the 'Attack' action<br><br>\" +\r\n                             \"Shield - Nodes with high defense. These Nodes can 'Fortify'<br><br>\" +\r\n                             \"To assign an action to a Node, you must first select one of your Nodes. This can be done by simply clicking on it. Double-clicking \" +\r\n                             \"a node will select all of your Nodes of the same type (e.g. select all CPU Core Nodes or all Transfer Nodes). Note that only Nodes \" +\r\n                             \"that can perform actions (CPU Core, Transfer, Shield, Firewall) can be selected. Selected Nodes will be denoted with a white highlight. After selecting a Node or multiple Nodes, \" +\r\n                             \"select its action using the Action Buttons near the top of the screen. Every action also has a corresponding keyboard \" +\r\n                             \"shortcut.<br><br>\" +\r\n                             \"For certain actions such as attacking, scanning, and weakening, the Node performing the action must have a target. To target \" +\r\n                             \"another node, simply click-and-drag from the 'source' Node to a target. A Node can only have one target, and you can target \" +\r\n                             \"any Node that is adjacent to one of your Nodes (immediately above, below, or to the side. NOT diagonal). Furthermore, only CPU Cores and Transfer Nodes \" +\r\n                             \"can target, since they are the only ones that can perform the related actions. To remove a target, you can simply click on the line that represents \" +\r\n                             \"the connection between one of your Nodes and its target. Alternatively, you can select the 'source' Node and click the 'Drop Connection' button, \" +\r\n                             \"or press 'd'.<br><br>\" +\r\n                             \"Other Notes:<br><br>\" +\r\n                             \"-Whenever a miscellenaous Node (not owned by the player or enemy) is conquered, the defense of all remaining miscellaneous Nodes that \" +\r\n                             \"are not actively being targeted will increase by a fixed percentage.<br><br>\" +\r\n                             \"-Whenever a Node is conquered, its stats are significantly reduced<br><br>\" +\r\n                             \"-Miscellaneous Nodes slowly raise their defense over time<br><br>\" +\r\n                             \"-Nodes slowly regenerate health over time.\",\r\n\r\n    // Time-related constants\r\n    MillisecondsPer20Hours: 72000000,\r\n    GameCyclesPer20Hours: 72000000 / 200,\r\n\r\n    MillisecondsPer10Hours: 36000000,\r\n    GameCyclesPer10Hours: 36000000 / 200,\r\n\r\n    MillisecondsPer8Hours: 28800000,\r\n    GameCyclesPer8Hours: 28800000 / 200,\r\n\r\n    MillisecondsPer4Hours: 14400000,\r\n    GameCyclesPer4Hours: 14400000 / 200,\r\n\r\n    MillisecondsPer2Hours: 7200000,\r\n    GameCyclesPer2Hours: 7200000 / 200,\r\n\r\n    MillisecondsPerHour: 3600000,\r\n    GameCyclesPerHour: 3600000 / 200,\r\n\r\n    MillisecondsPerHalfHour: 1800000,\r\n    GameCyclesPerHalfHour: 1800000 / 200,\r\n\r\n    MillisecondsPerQuarterHour: 900000,\r\n    GameCyclesPerQuarterHour: 900000 / 200,\r\n\r\n    MillisecondsPerFiveMinutes: 300000,\r\n    GameCyclesPerFiveMinutes: 300000 / 200,\r\n\r\n    // Player Work & Action\r\n    FactionWorkHacking: \"Faction Hacking Work\",\r\n    FactionWorkField: \"Faction Field Work\",\r\n    FactionWorkSecurity: \"Faction Security Work\",\r\n\r\n    WorkTypeCompany: \"Working for Company\",\r\n    WorkTypeCompanyPartTime: \"Working for Company part-time\",\r\n    WorkTypeFaction: \"Working for Faction\",\r\n    WorkTypeCreateProgram: \"Working on Create a Program\",\r\n    WorkTypeStudyClass: \"Studying or Taking a class at university\",\r\n    WorkTypeCrime: \"Committing a crime\",\r\n\r\n    ClassStudyComputerScience: \"studying Computer Science\",\r\n    ClassDataStructures: \"taking a Data Structures course\",\r\n    ClassNetworks: \"taking a Networks course\",\r\n    ClassAlgorithms: \"taking an Algorithms course\",\r\n    ClassManagement: \"taking a Management course\",\r\n    ClassLeadership: \"taking a Leadership course\",\r\n    ClassGymStrength: \"training your strength at a gym\",\r\n    ClassGymDefense: \"training your defense at a gym\",\r\n    ClassGymDexterity: \"training your dexterity at a gym\",\r\n    ClassGymAgility: \"training your agility at a gym\",\r\n\r\n    ClassDataStructuresBaseCost: 40,\r\n    ClassNetworksBaseCost: 80,\r\n    ClassAlgorithmsBaseCost: 320,\r\n    ClassManagementBaseCost: 160,\r\n    ClassLeadershipBaseCost: 320,\r\n    ClassGymBaseCost: 120,\r\n\r\n    CrimeShoplift: \"shoplift\",\r\n    CrimeRobStore: \"rob a store\",\r\n    CrimeMug: \"mug someone\",\r\n    CrimeLarceny: \"commit larceny\",\r\n    CrimeDrugs: \"deal drugs\",\r\n    CrimeBondForgery: \"forge corporate bonds\",\r\n    CrimeTraffickArms: \"traffick illegal arms\",\r\n    CrimeHomicide: \"commit homicide\",\r\n    CrimeGrandTheftAuto: \"commit grand theft auto\",\r\n    CrimeKidnap: \"kidnap someone for ransom\",\r\n    CrimeAssassination: \"assassinate a high-profile target\",\r\n    CrimeHeist: \"pull off the ultimate heist\",\r\n\r\n    // Coding Contract\r\n    // TODO Move this into Coding contract impelmentation?\r\n    CodingContractBaseFactionRepGain: 2500,\r\n    CodingContractBaseCompanyRepGain: 4000,\r\n    CodingContractBaseMoneyGain: 75e6,\r\n\r\n    // BitNode/Source-File related stuff\r\n    TotalNumBitNodes: 24,\r\n\r\n    LatestUpdate:\r\n    `\r\n    v0.47.0\r\n    * Stock Market changes:\r\n    ** Implemented spread. Stock's now have bid and ask prices at which transactions occur\r\n    ** Large transactions will now influence a stock's price and forecast\r\n    ** This \"influencing\" can take effect in the middle of a transaction\r\n    ** See documentation for more details on these changes\r\n    ** Added getStockAskPrice(), getStockBidPrice() Netscript functions to the TIX API\r\n    ** Added getStockPurchaseCost(), getStockSaleGain() Netscript functions to the TIX API\r\n\r\n    * Re-sleeves can no longer have the NeuroFlux Governor augmentation\r\n    ** This is just a temporary patch until the mechanic gets re-worked\r\n\r\n    * Adjusted RAM costs of Netscript Singularity functions (mostly increased)\r\n    * Netscript Singularity functions no longer cost extra RAM outside of BitNode-4\r\n    * Corporation employees no longer have an \"age\" stat\r\n    * Bug Fix: Corporation employees stats should no longer become negative\r\n    * Bug Fix: Fixed sleeve.getInformation() throwing error in certain scenarios\r\n    * Bug Fix: Coding contracts should no longer generate on the w0r1d_d43m0n server\r\n    * Bug Fix: Duplicate Sleeves now properly have access to all Augmentations if you have a gang\r\n    * Bug Fix: getAugmentationsFromFaction() & purchaseAugmentation() functions should now work properly if you have a gang\r\n    * Bug Fix: Fixed issue that caused messages (.msg) to be sent when refreshing/reloading the game\r\n    * Bug Fix: Purchasing hash upgrades for Bladeburner/Corporation when you don't actually have access to those mechanics no longer gives hashes\r\n    * Bug Fix: run(), exec(), and spawn() Netscript functions now throw if called with 0 threads\r\n    * Bug Fix: Faction UI should now automatically update reputation\r\n    `\r\n}\r\n","/**\r\n * Represents a Limit or Buy Order on the stock market. Does not represent\r\n * a Market Order since those are just executed immediately\r\n */\r\nimport { OrderTypes } from \"./data/OrderTypes\";\r\nimport { PositionTypes } from \"./data/PositionTypes\";\r\n\r\nimport {\r\n    Generic_fromJSON,\r\n    Generic_toJSON,\r\n    Reviver,\r\n} from \"../../utils/JSONReviver\";\r\n\r\nexport class Order {\r\n    /**\r\n     * Initializes a Order from a JSON save state\r\n     */\r\n    static fromJSON(value: any): Order {\r\n        return Generic_fromJSON(Order, value.data);\r\n    }\r\n\r\n    readonly pos: PositionTypes;\r\n    readonly price: number;\r\n    shares: number;\r\n    readonly stockSymbol: string;\r\n    readonly type: OrderTypes;\r\n\r\n    constructor(stockSymbol: string=\"\", shares: number=0, price: number=0, typ: OrderTypes=OrderTypes.LimitBuy, pos: PositionTypes=PositionTypes.Long) {\r\n        // Validate arguments\r\n        let invalidArgs: boolean = false;\r\n        if (typeof shares !== \"number\" || typeof price !== \"number\") {\r\n            invalidArgs = true;\r\n        }\r\n        if (isNaN(shares) || isNaN(price)) {\r\n            invalidArgs = true;\r\n        }\r\n        if (typeof stockSymbol !== \"string\") {\r\n            invalidArgs = true;\r\n        }\r\n        if (invalidArgs) {\r\n            throw new Error(`Invalid constructor paramters for Order`);\r\n        }\r\n\r\n        this.stockSymbol = stockSymbol;\r\n        this.shares = shares;\r\n        this.price = price;\r\n        this.type = typ;\r\n        this.pos = pos;\r\n    }\r\n\r\n    /**\r\n     * Serialize the Order to a JSON save state.\r\n     */\r\n    toJSON(): any {\r\n        return Generic_toJSON(\"Order\", this);\r\n    }\r\n}\r\n\r\nReviver.constructors.Order = Order;\r\n"],"sourceRoot":""}